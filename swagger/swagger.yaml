openapi: 3.0.0
info:
  title: Users
  description: Simple User API
  version: "1.0"
servers:
- url: /
paths:
  /api/v1/users:
    get:
      tags:
      - Users
      summary: Get all users
      description: Get all users
      responses:
        "200":
          description: An array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
    post:
      tags:
      - Users
      summary: Creates a user
      description: Creates a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Created a new User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUser'
        "400":
          description: Failed to create a new User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user by id
      description: Get a user by id
      parameters:
      - name: id
        in: path
        description: The user id requested by user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: A user object in Json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
    put:
      tags:
      - Users
      summary: Update a user by id
      description: Update a user by id
      parameters:
      - name: id
        in: path
        description: The user id requested by user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        "200":
          description: Updated the User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        "404":
          description: Failed to update the User object since id not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        "400":
          description: Failed to update the User object since required fields are
            missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
    delete:
      tags:
      - Users
      summary: Deletes a user by id
      description: Deletes a user by id
      parameters:
      - name: id
        in: path
        description: The user id requested by user to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User deleted successfully.
        "404":
          description: Failed to delete the User object since id not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
components:
  schemas:
    NewUser:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'
      description: array of users
      example:
        success: "true"
        message: users retrieved successfully
        user:
          id: 1
          firstName: John
          secondName: Adam
          age: 38
    Users:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      description: array of users
      example:
        success: "true"
        message: user added successfully
        users:
        - id: 1
          firstName: John
          secondName: Adam
          age: 38
        - id: 2
          firstName: Thomas
          secondName: Edisson
          age: 55
    User:
      required:
      - age
      - firstName
      - id
      - secondName
      type: object
      properties:
        id:
          type: integer
          description: id of the user. Auto assigned.
          readOnly: true
        firstName:
          type: string
          description: First name of the user
        secondName:
          type: string
          description: Second name of the user
        age:
          type: integer
          description: Age of the user
      example:
        id: 1
        firstName: Adam
        secondName: John
        age: 32
    StandardResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      example:
        success: false
        message: message
